require ('babel-register');
const HtmlWebpackPlugin = require("html-webpack-plugin");
const partials = require("./libs/webpackPartials");
const path = require('path');
const pkg = require("./package.json");
const dep = Object.keys(pkg.dependencies || []);

const TARGET = process.env.npm_lifecycle_event;

process.env.BABEL_ENV = TARGET;
// process.traceDeprecation = true;

const PATHS = {
    app: path.resolve(__dirname, "app"),
    build: path.resolve(__dirname, "public"),
    style: {
        main: path.resolve(__dirname, "app", "main.scss"),
        theme: path.resolve(__dirname, 'app/theme.scss'),
        vendor: [
            path.resolve(__dirname, "app/assets", "vendorCSS/fontawesome"),
            path.resolve(__dirname, "app/assets", "vendorCSS/icofont")
        ]
    },
    image: path.resolve(__dirname, "app", "assets/img"),
    font: path.resolve(__dirname, "app", "assets/fonts"),
    hmr: 'react-hot-loader/patch',
    wds: 'webpack-dev-server/client?http://localhost:8080'
};

const merge = require("webpack-merge");

const commonConfig = {
    entry: {
        style: PATHS.style.main,
        app: PATHS.app
    },
    output: {
        path: PATHS.build,
        filename: "[name].js",
    },
    // postcss: [
    //     autoprefixer({
    //         browsers: [
    //             'last 2 versions','ie >= 9',
    //             'and_chr >= 2.3'
    //         ]
    //     })
    // ],
    plugins:[
        new HtmlWebpackPlugin({
            title: '{{appName}}',
            template: './libs/template.html',
            appMountId: 'app',
            inject: false,
            mobile: true,
            files:{
                appleIcon57x57: 'assets/favicons/apple-icon-57x57.png',
                appleIcon60x60: 'assets/favicons/apple-icon-60x60.png',
                appleIcon72x72: 'assets/favicons/apple-icon-72x72.png',
                appleIcon76x76: 'assets/favicons/apple-icon-76x76.png',
                appleIcon114x114: 'assets/favicons/apple-icon-114x114.png',
                appleIcon120x120: 'assets/favicons/apple-icon-120x120.png',
                appleIcon144x144: 'assets/favicons/apple-icon-144x144.png',
                appleIcon152x152: 'assets/favicons/apple-icon-152x152.png',
                appleIcon180x180: 'assets/favicons/apple-icon-180x180.png',
                androidIcon192x192: 'assets/favicons/android-icon-192x192.png',
                appleIcon180x180: 'assets/favicons/apple-icon-180x180.png',
                favicon32x32: 'assets/favicons/favicon-32x32.png',
                favicon96x96: 'assets/favicons/favicon-96x96.png',
                favicon16x16: 'assets/favicons/favicon-16x16.png',
                manifest: 'assets/favicons/manifest.json',
                msIcon144x144: 'assets/favicons/ms-icon-144x144.png'
            }
        })
    ],
    resolve: {
        extensions:['.css', '.js', '.es6', '.json', '.scss', '.jsx', '.html'],
        modules: [
            path.resolve('./app'),
            'node_modules',
            path.resolve(__dirname, './node_modules')
        ]
    },
    module: {
      noParse:[path.resolve(__dirname, 'node_modules/localforage/')],
    },
};

var config;

switch (process.env.npm_lifecycle_event){
    case "stats":
    case "build":
        config = merge(
            commonConfig,
            {
                devtool: "source-map",
                output: {
                    path: PATHS.build,
                    filename: "[name].[chunkhash].js",
                    chunkFilename: "[chunkhash].js"
                }
            },
            partials.cleanBuildFolder(PATHS.build),
            partials.setFreeVariable(
                "process.env.NODE_ENV",
                "production"
            ),
            partials.extractBundle({
                name: "vendor",
                entries: dep
            }),
            partials.minify(),
            partials.extractSCSS(PATHS.style),
            partials.purifyCSS([PATHS.app]),
            partials.transformJS(PATHS.app),
            partials.loadImages(PATHS.image),
            partials.loadFonts(PATHS.font)
        );
        break;
    default:
        config = merge(
            commonConfig,
            partials.devServer({
                host: process.env.HOST,
                port: process.env.PORT,
                // publicPath: 'http://localhost:8080',
                // contentBase: '/assets/'
            }),
            {
                entry: [
                    PATHS.wds,
                    PATHS.app,
                    PATHS.hmr
                ],
                devtool: "eval-source-map"
            },
            partials.setupCSS(PATHS.style),
            partials.transformJSHot(PATHS.app),
            partials.inlineImages(PATHS.image, 25000),
            partials.loadFonts(PATHS.font, 50000)
        );

};

module.exports = config
